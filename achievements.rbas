#include "achievements.bi"
#include "reload.bi"
#include "steam.bi"

using Reload

' Local functions
declare function type_name_to_enum(name as string) as AchievementType

dim shared next_id as integer
redim shared achievements(0) as AchievementDefinition
redim shared achievement_progress(0) as AchievementProgress

sub load_achievements(file_path as string)
    free_achievements

    DIM doc as Docptr
    doc = LoadDocument(file_path, LoadOptions.optIgnoreMissing)
    if doc = null then return

    dim cheevos as Nodeptr = DocumentRoot(doc)
    if cheevos = null then
        FreeDocument(doc)
        return
    end if

    dim num_achievements as integer = CountChildren(cheevos, "achievement")
    ' debug "achievements: loading " & num_achievements & " from disk"
    
    redim achievements(num_achievements)
    redim achievement_progress(num_achievements)

    dim i as integer = 0

    READNODE cheevos
        WITHNODE cheevos."achievement" as cheevo   
            ' debug "achievements: loading achievement #" & i
            with achievements(i)
                .id = GetInteger(cheevo)
                .name = cheevo."name".string
                .achievement_type = type_name_to_enum(cheevo."type".string)
                .max_value = cheevo."max_value".integer
                .progress_interval = cheevo."progress_interval".integer
                .latching = cheevo."latching".exists
                .steam_id = cheevo."steam_id".string

                dim tag as Nodeptr = FirstChild(cheevo."tags".ptr, "tag")
                while tag <> null
                    v_append .tags, GetInteger(tag)
                    tag = NextSibling(tag, "tag")
                wend
            end with
            ' debug "achievements: Finished loading achievement #" & i & ", " & achievements(i).name
            i += 1
        END WITHNODE
    END READNODE

    FreeDocument(doc)
end sub

sub free_achievements
    redim achievements(0)
    redim achievement_progress(0)

    next_id = 1
end sub

sub achievement_tag_notify(id as integer, state as boolean)
    for i as integer = 0 to ubound(achievements)
        with achievements(i)
            dim ix as integer = v_find (.tags, id)
            if ix <> -1 then
                ' do something
            end if
        end with
    next
end sub

constructor AchievementDefinition
    id = 0
    name = ""
    achievement_type = AchievementType.flag
    max_value = 0
    progress_interval = 0
    latching = false
    steam_id = ""

    v_new tags
end constructor

destructor AchievementDefinition
    v_free tags
end destructor


constructor AchievementProgress
    id = 0
    value = 0
    v_new seen_tags
end constructor

destructor AchievementProgress
    v_free seen_tags
end destructor

function type_name_to_enum(name as string) as AchievementType
    select case name
        case "flag"
            return AchievementType.flag
        case "count"
            return AchievementType.count
        case else
            debug "achievements: unknown achievement type string: " & name
            return AchievementType.flag
    end select
end function

function type_enum_to_name(typ as AchievementType) as string
    select case typ
        case AchievementType.flag
            return "flag"
        case AchievementType.count
            return "count"
        case else
            debug "achievements: unknown achievement type enum: " & typ
            return "flag"
    end select
end function