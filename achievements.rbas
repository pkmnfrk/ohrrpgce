#include "achievements.bi"
#include "reload.bi"

' uncomment to enable debug output
#define DEBUG_ACHIEVEMENTS

using Reload

' Local functions
declare function type_name_to_enum(name as string) as AchievementType

#ifdef DEBUG_ACHIEVEMENTS
declare sub ach_debug(msg as string)
#else
#define ach_debug(x)
#endif

dim shared next_id as integer
redim shared achievements() as AchievementDefinition

' -- public api --

sub achievement_definitions_load(file_path as string)
    achievement_definitions_free

    DIM doc as Docptr
    doc = LoadDocument(file_path, LoadOptions.optIgnoreMissing)
    if doc = null then return

    dim cheevos as Nodeptr = DocumentRoot(doc)
    if cheevos = null then
        FreeDocument(doc)
        return
    end if

    dim num_achievements as integer = CountChildren(cheevos, "achievement")

    ach_debug("loading " & num_achievements & " from disk")

    if num_achievements = 0 then
        erase achievements
    else
        redim achievements(num_achievements - 1)
    end if

    dim i as integer = 0

    READNODE cheevos
        next_id = cheevos."next_id".integer

        WITHNODE cheevos."achievement" as cheevo
            ach_debug("loading achievement #" & i)
            with achievements(i)
                .id = GetInteger(cheevo)
                .name = cheevo."name".string
                .achievement_type = type_name_to_enum(cheevo."type".string)
                .max_value = cheevo."max_value".integer
                .progress_interval = cheevo."progress_interval".integer
                .latching = cheevo."latching".exists
                .steam_id = cheevo."steam_id".string

                dim tag as Nodeptr = FirstChild(cheevo."tags".ptr, "tag")
                while tag <> null
                    v_append .tags, GetInteger(tag)
                    tag = NextSibling(tag, "tag")
                wend
            end with
            ach_debug("Finished loading achievement #" & i & ", " & achievements(i).name)
            i += 1
        END WITHNODE
    END READNODE

    FreeDocument(doc)
end sub

sub achievement_definitions_free
    erase achievements

    next_id = 1
end sub

function achievement_definitions_count() as integer
    ach_debug("achievement_definitions_count")
    return ubound(achievements) - lbound(achievements) + 1
end function

function achievement_definitions_get_by_index(index as integer) as AchievementDefinition ptr
    ach_debug("achievement_definitions_get_by_index")
    if index < 0 orelse index >= ubound(achievements) then return null

    return @achievements(index)
end function

function achievement_definitions_get_by_id(id as integer) as AchievementDefinition ptr
    for i as integer = 0 to ubound(achievements) - 1
        if achievements(i).id = id then return @achievements(i)
    next
    return null
end function

function achievement_definitions_new() as AchievementDefinition ptr
    redim preserve achievements(ubound(achievements))
    dim new_achievement as AchievementDefinition ptr = @achievements(ubound(achievements) - 1)
    new_achievement->id = next_id
    next_id += 1

    return new_achievement
end function


' -- members for AchievementDefinition --

constructor AchievementDefinition
    id = 0
    name = ""
    achievement_type = AchievementType.flag
    max_value = 0
    progress_interval = 0
    latching = false
    steam_id = ""

    v_new tags
end constructor

destructor AchievementDefinition
    v_free tags
end destructor

' -- internal helpers --

function type_name_to_enum(name as string) as AchievementType
    select case name
        case "flag"
            return AchievementType.flag
        case "count"
            return AchievementType.count
        case else
            ach_debug("unknown achievement type string: " & name)
            return AchievementType.flag
    end select
end function

function type_enum_to_name(typ as AchievementType) as string
    select case typ
        case AchievementType.flag
            return "flag"
        case AchievementType.count
            return "count"
        case else
            ach_debug("unknown achievement type enum: " & typ)
            return "flag"
    end select
end function

#ifdef DEBUG_ACHIEVEMENTS
private sub ach_debug(msg as string)
    debug "achievements: " & msg
end sub
#endif